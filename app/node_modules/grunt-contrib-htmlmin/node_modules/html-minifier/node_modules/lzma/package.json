{
  "author": {
    "name": "Nathan Rugg",
    "email": "nmrugg@gmail.com"
  },
  "name": "lzma",
  "description": "A JavaScript implementation of the Lempel-Ziv-Markov (LZMA) chain compression algorithm",
  "version": "2.3.2",
  "homepage": "http://nmrugg.github.com/LZMA-JS/",
  "repository": {
    "type": "git",
    "url": "git://github.com/nmrugg/LZMA-JS.git"
  },
  "bugs": {
    "url": "https://github.com/nmrugg/LZMA-JS/issues"
  },
  "bin": {
    "lzma.js": "bin/lzma.js"
  },
  "devDependencies": {
    "uglify-js": "=2.4.16"
  },
  "scripts": {
    "test": "node test/test-node.js && node test/test-node.js --sync"
  },
  "license": "MIT",
  "tonicExampleFilename": "demos/tonic_example.js",
  "keywords": [
    "lzma",
    "compression",
    "decompression"
  ],
  "readme": "LZMA Everywhere [![Travis CI](https://travis-ci.org/nmrugg/LZMA-JS.svg)](https://travis-ci.org/nmrugg/LZMA-JS/branches)\n\n[LZMA-JS](https://github.com/nmrugg/LZMA-JS) is a JavaScript implementation of the Lempel-Ziv-Markov (LZMA) chain compression algorithm.\n\n[![NPM](https://nodei.co/npm/lzma.png?downloads=true)](https://nodei.co/npm/lzma/)<br>\n[![NPM](https://nodei.co/npm-dl/lzma.png?months=6)](https://nodei.co/npm/lzma/)\n\nWhat's New in 2.x\n-----------------\nTwo things: **speed** & **size**.\n\nLZMA-JS 2.x now minifies to smaller than one fourth of 1.x and in some cases is 1,000x faster (particularly with high compression).\n\nIt is also more modular. The compression and decompression algorithms can be optionally separated to shrink the file size even more.\n\nHere are some file size stats:\n\n|    Filename    |   Method(s)   | Minified | Gzipped |\n|:---------------|:--------------|---------:|--------:|\n| lzma_worker.js | both          |  23.4 KB |  9.2 KB |\n| lzma-c.js      | compression   |  17.9 KB |  7.3 KB |\n| lzma-d.js      | decompression |   6.8 KB |  3.0 KB |\n\nAlso, older versions returned compressed data as unsigned bytes. Now, it returns signed bytes.\n\nDemos\n-----\n\nLive demos can be found [here](http://nmrugg.github.io/LZMA-JS/).\n\n\nHow to Get\n----------\n\nLZMA-JS is available in the npm repository.\n\n```shell\nnpm install lzma\n```\n\nIf you are using bower, you can download the source like this:\n\n```shell\nbower install lzma\n```\n\nHow to Use\n----------\n\nFirst, load the bootstrapping code.\n\n```html\n<!-- In a browser -->\n<script src=\"../src/lzma.js\"></script>\n```\n\nCreate the LZMA object.\n\n```js\n/// LZMA([optional path])\n/// If lzma_worker.js is in the same directory, you don't need to set the path.\nvar my_lzma = new LZMA(\"../src/lzma_worker.js\");\n```\n\n(De)Compress stuff asynchronously:\n\n```js\n/// To compress:\n///NOTE: mode can be 1-9 (1 is fast and pretty good; 9 is slower and probably much better).\n///NOTE: compress() can take a string or an array of bytes.\n///      (A Node.js Buffer or a Uint8Array instance counts as an array of bytes.)\nmy_lzma.compress(string || byte_array, mode, on_finish(result, error) {}, on_progress(percent) {});\n\n/// To decompress:\n///NOTE: By default, the result will be returned as a string if it decodes as valid UTF-8 text;\n///      otherwise, it will return a Uint8Array instance.\nmy_lzma.decompress(byte_array, on_finish(result, error) {}, on_progress(percent) {});\n```\n\n(De)Compress stuff synchronously (not recommended; may cause the client to freeze):\n\n```js\n/// To compress:\n///NOTE: You'll need to do your own error catching.\nresult = my_lzma.compress(string || byte_array, mode);\n\n/// To decompress:\nresult = my_lzma.decompress(byte_array);\n```\n\n\nNode.js\n-------\n\nAfter installing with npm, it can be loaded with the following code:\n\n```js\nvar my_lzma = require(\"lzma\");\n```\n\nNotes\n-----\n\nThe `decompress()` function needs an array of bytes or a Node.js `Buffer` object.\n\nIf the decompression progress is unable to be calculated, the `on_progress()` function will be triggered once with the value `-1`.\n\nLZMA-JS will try to use Web Workers if they are available.  If the environment does not support Web Workers,\nit will just do something else, and it won't pollute the global scope.\nEach call to `LZMA()` will create a new Web Worker, which can be accessed via `my_lzma.worker()`.\n\nLZMA-JS was originally based on gwt-lzma, which is a port of the LZMA SDK from Java into JavaScript.\n\nBut I don't want to use Web Workers\n-----\n\nIf you'd prefer not to bother with Web Workers, you can just include `lzma_worker.js` directly. For example:\n\n```html\n<script src=\"../src/lzma_worker.js\"></script>\n```\n\nThat will create a global `LZMA` object that you can use directly. Like this:\n\n```js\nLZMA.compress(string || byte_array, mode, on_finish(result, error) {}, on_progress(percent) {});\n\nLZMA.decompress(byte_array, on_finish(result, error) {}, on_progress(percent) {});\n```\n\nNote that this `LZMA` variable is an `Object`, not a `Function`.\n\nIn Node.js, the Web Worker code is already skipped, so there's no need to do this.\n\nAnd if you only need to compress or decompress and you're looking to save some bytes, instead of loading lzma_worker.js,\nyou can simply load lzma-c.js (for compression) or lzma-d.js (for decompression).\n\nOf course, you'll want to load the minified versions if you're sending data over the wire.\n\n\nCompatibility\n---\n\nLZMA-JS is compatible with anything that is compatible with the reference implementation of LZMA, for example, the `lzma` command.\n\n\nLicense\n-------\n[MIT](https://raw.githubusercontent.com/nmrugg/LZMA-JS/master/LICENSE)\n",
  "readmeFilename": "readme.md",
  "_id": "lzma@2.3.2",
  "dist": {
    "shasum": "26b6bcafdf9d2200fa6bdf2f526bcb6a5d88d61e"
  },
  "_from": "lzma@2.3.x",
  "_resolved": "https://registry.npmjs.org/lzma/-/lzma-2.3.2.tgz"
}
